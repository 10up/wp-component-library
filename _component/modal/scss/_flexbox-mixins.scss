/** --------------------------------------------------------------------

  Flexbox Mixins

--------------------------------------------------------------------- */

// Full Flex or Inline Flex
$flexbox:
       -ms-flexbox,   // ie 10
      -webkit-flex,   // chrome 21 - 28, safari 6.1+
              flex;   // moz 22+, IE 11+, chrome 29+, Opera 17+



$inline-flexbox:
     -ms-inline-flexbox,    // ie 10
    -webkit-inline-flex,    // chrome 21 - 28, safari 6.1+
            inline-flex;    // moz 22+, IE 11+, chrome 29+, Opera 17+

//------------------------------------------------------------------------

// mixin to auto create the appropriate displays
// based on either flex or inline-flex
@mixin flexbox( $display: flex ) {
  @if $display == flex {
    @each $v in $flexbox {
      display: $v;
    }
  }

  @else {
    @each $v in $inline-flexbox {
      display: $v;
    }
  }
}

// example:
// @include flexbox(flex);
// or
// @include flexbox(inline-flex);



// ------------------------------------------
//  Applies to parent flex container
// ------------------------------------------

// Wrapping
//
// The 'flex-wrap' property sets the flex container to single-line
// or multi-line, and the direction of the cross-axis, which sets
// the direction of how lines are stacked.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap( $value... ) {
  @if $value == nowrap {
    -ms-flex-wrap: none;
  }
  @else {
    -ms-flex-wrap: $value;
  }
   -webkit-flex-wrap: $value;
           flex-wrap: $value;
}



// Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction( $value... ) {
      -ms-flex-direction: $value;
  -webkit-flex-direction: $value;
          flex-direction: $value;
}



// Shorthand for flex-direction and flex-wrap
//
// Define the flex container's main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow( $value... ) {
      -ms-flex-flow: $value;
  -webkit-flex-flow: $value;
          flex-flow: $value;
}



// Justify Content
//
// Align flex items along the main axis of the current line of the
// flex container. This is only done after any flexible lengths and
// auto margins have been resolved.
//
// This helps distribute remaining space if any flex items on a line are
// inflexible, or are flexible but have reached their maximum size.
//
// This also helps control the alignment of items when they overflow a line.
//
// space-between and around values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content( $value: flex-start ) {
  @if $value == flex-start {
    -ms-flex-pack: start;
  }
  @else if $value == flex-end {
    -ms-flex-pack: end;
  }
  @else if $value == space-between {
    -ms-flex-pack: justify;
  }
  @else if $value == space-around {
    -ms-flex-pack: distribute;
  }
  @else {
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
          justify-content: $value;
}
// flex-start | flex-end | center | space-between | space-around



// Align Items
@mixin align-items( $value: stretch ) {
    @if $value == flex-start {
      -ms-flex-align: start;
    }
    @else if $value == flex-end {
      -ms-flex-align: end;
    }
    @else {
      -ms-flex-align: $value;
    }
  -webkit-align-items: $value;
          align-items: $value;
}
// flex-start | flex-end | center | baseline | stretch


// Align Self
@mixin align-self( $value: auto ) {
  @if $value == flex-start {
    -ms-flex-item-align: start;
  }
  @else if $value == flex-end {
    -ms-flex-item-align: end;
  }
  @else {
    -ms-flex-item-align: $value;
  }
  -webkit-align-self: $value;
          align-self: $value;
}
// Values: auto | flex-start | flex-end | center | baseline | stretch


// Align Content
@mixin align-content( $value: stretch ) {
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  }
  @else if $value == flex-end {
    -ms-flex-line-pack: end;
  }
  @else {
    -ms-flex-line-pack: $value;
  }
  -webkit-align-content: $value;
          align-content: $value;
}
// flex-start | flex-end | center | space-between | space-around | stretch




// ------------------------------------------
//  Applies to parent flex container
// ------------------------------------------

// Ordering
// Controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0

@mixin order( $value: 0 ) { // default value is zero
    -webkit-order: $value;
   -ms-flex-order: $value;
            order: $value;
}


// Grow
// Defines the ability for a flex item to grow if
// necessary. It accepts a unit-less value that
// serves as a proportion. Negative numbers are not valid
//
// default value is zero
@mixin flex-grow( $value: 0 ) {
  -ms-flex-positive: $value;
  -webkit-flex-grow: $value;
          flex-grow: $value;
}


// Shrink
// Determines how much the flex item will shrink
// relative to the rest of the flex items in the flex
// container when there isn't enough space on the row.
//
// default value is one
@mixin flex-shrink( $value: 1 ) {
    -ms-flex-negative: $value;
  -webkit-flex-shrink: $value;
          flex-shrink: $value;
}


// Basis
// Defines the default size of an element before the
// remaining space is distributed.

// default value is auto
@mixin flex-basis( $value: auto ) {
  -ms-flex-preferred-size: $value;
       -webkit-flex-basis: $value;
               flex-basis: $value;
}


// Shorthand for flex-grow, flex-shrink, flex-basis
// Shrink and basis are optional properties
@mixin flex($fg: 1, $fs: null, $fb: null) {
      -ms-flex: $fg $fs $fb;
  -webkit-flex: $fg $fs $fb;
          flex: $fg $fs $fb;
}
